- name : Enable DB replication
  hosts: gitlab*
  become: yes
  become_user: root
  vars:
    proxy_env:
      http_proxy: http://{{ hostvars[inventory_hostname].proxy }}:3128
      https_proxy: http://{{ hostvars[inventory_hostname].proxy }}:3128
      ftp_proxy: http://{{ hostvars[inventory_hostname].proxy }}:3128
  environment: "{{ proxy_env }} "
  tasks :

      - name: Install pip3
        apt:
         name: python3-pip
         
      - name: install pexpect
        pip:
          name: pexpect
        become: yes

      - name: Define the node as primary
        shell: "gitlab-ctl set-geo-primary-node"
        when : hostvars[inventory_hostname].role == "primary"
      
      - name: Generate a MD5 hash for the db user
        register: db_md5
        expect:
          command: "gitlab-ctl pg-password-md5 gitlab"
          responses:
            password:
              - "packtpub"
              - "packtpub"

      - set_fact:
          generated_db_pass: "{{ db_md5.stdout_lines[2] }}"
 
      - name: Set gitlab-replicator password
        expect:
          command: "gitlab-ctl set-replication-password"
          responses:
            password:
              - "packtpub"
              - "packtpub" 
        when : hostvars[inventory_hostname].role == "primary"  

      - name: Place GitLab omnibus configuration file
        template:
         src: gitlab.rb.primary.j2
         dest: /etc/gitlab/gitlab.rb
         owner: root
         group: root
         mode: 0600
         force: yes
        when : hostvars[inventory_hostname].role == "primary"

      - name: Activate changes
        shell: "gitlab-ctl reconfigure"
        when : hostvars[inventory_hostname].role == "primary"

      - name: Restart services
        shell: "gitlab-ctl stop;gitlab-ctl kill;gitlab-ctl start"
        when : hostvars[inventory_hostname].role == "primary"

      - name: Fetch DB ssl cert
        fetch:
          src: /var/opt/gitlab/postgresql/data/server.crt
          dest: db-cert.crt
          flat: yes
          when : hostvars[inventory_hostname].role == "primary"
      
      - name: Stop unicorn
        shell: "gitlab-ctl stop unicorn"
        when : hostvars[inventory_hostname].role == "secondary"
 
      - name: Stop sidekiq
        shell: "gitlab-ctl stop sidekiq"
        when : hostvars[inventory_hostname].role == "secondary"
      
      - name: Creates postgres user config dir
        file:
         path: /var/opt/gitlab/postgresql/.postgresql/
         state: directory
         owner: gitlab-psql
         group: git
         mode: 0700
      
      - name: Place ssl cert file for postgres
        copy:
         src:  db-cert.crt
         dest: /var/opt/gitlab/postgresql/.postgresql/root.crt
         owner: gitlab-psql
         group: git
         mode: 0644
        when : hostvars[inventory_hostname].role == "secondary"
            
      - name: Place GitLab omnibus configuration file
        template:
         src: gitlab.rb.secondary.j2
         dest: /etc/gitlab/gitlab.rb
         owner: root
         group: root
         mode: 0600
         force: yes
        when : hostvars[inventory_hostname].role == "secondary"

      - name: Activate changes
        shell: "gitlab-ctl reconfigure"
        when : hostvars[inventory_hostname].role == "secondary"

      - name: Restart services
        shell: "gitlab-ctl restart"
        when : hostvars[inventory_hostname].role == "secondary"

      - name: Activate changes
        shell: "gitlab-ctl reconfigure"
        when : hostvars[inventory_hostname].role == "secondary"

      - name: manually shutdown the logcursor
        shell: "gitlab-ctl stop geo-logcursor"
        when : hostvars[inventory_hostname].role == "secondary"

      - name: Wait for stopping
        pause:
          minutes: 1

      - name: Initiate replication
        expect:
          command: "gitlab-ctl replicate-geo-database  --slot-name=us  --host={{ hostvars[groups['gitlab_primary'][0]]['geo_primary_address'] }} --no-wait --skip-backup --force"
          responses:
            password:
              - "packtpub"
          timeout: null
        async: 1000
        poll: 0
        register: replication_job
        when : hostvars[inventory_hostname].role == "secondary"
        vars:
          ansible_command_timeout: 1200

      - name: 'DB replication - check job'
        async_status: jid={{ replication_job.ansible_job_id }}
        register: job_result
        until: job_result.finished
        retries: 50
        when : hostvars[inventory_hostname].role == "secondary"

      - name: Wait for restart
        pause:
          minutes: 3
        when : hostvars[inventory_hostname].role == "primary"

      - name: Add secondary node
        command: |
         gitlab-rails runner 'GeoNode.find_or_create_by!(url: "http://{{ hostvars[groups['gitlab_primary'][0]]['geo_secondary_address'] }}", name: "http://{{ hostvars[groups['gitlab_primary'][0]]['geo_secondary_address'] }}", primary: false)'
        when : hostvars[inventory_hostname].role == "primary"

      - name: Configure application settings
        command: |
         gitlab-rails runner 'ApplicationSetting.last.update(authorized_keys_enabled: false, hashed_storage_enabled: true)'
        when : hostvars[inventory_hostname].role == "primary"


